{"version":3,"sources":["main.js"],"names":["canvas","document","querySelector","ballCount","count","ctx","getContext","width","window","innerWidth","height","innerHeight","random","min","max","Math","floor","randomRGB","Shape","x","y","velX","velY","Ball","color","size","exists","beginPath","fillStyle","arc","PI","fill","balls","ball","dx","dy","sqrt","EvilCircle","addEventListener","e","key","lineWidth","strokeStyle","stroke","innerHTML","length","push","loop","fillRect","draw","update","collisionDetect","evil","checkBounds","requestAnimationFrame"],"mappings":"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","file":"main.649dd203.js","sourceRoot":"../src","sourcesContent":["// setup canvas\n\nconst canvas = document.querySelector('canvas');\nconst ballCount = document.querySelector('h1 ~ p');\nlet count = 0;\nconst ctx = canvas.getContext('2d');\n\nconst width = canvas.width = window.innerWidth;\nconst height = canvas.height = window.innerHeight;\n\n// function to generate random number\n\nfunction random(min, max) {\n\tconst num = Math.floor(Math.random() * (max - min + 1)) + min;\n\treturn num;\n}\n\n// function to generate random color\n\nfunction randomRGB() {\n\treturn `rgb(${random(0, 255)},${random(0, 255)},${random(0, 255)})`;\n}\n\nclass Shape {\n\tconstructor(x, y, velX, velY) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.velX = velX;\n\t\tthis.velY = velY;\n\t}\n}\n\n// ball class \nclass Ball extends Shape {\n\tconstructor(x, y, velX, velY, color, size) {\n\t\tsuper(x, y, velX, velY);\n\t\tthis.color = color;\n\t\tthis.size = size;\n\t\tthis.exists = true;\n\t}\n\n\tdraw() {\n\t\tctx.beginPath();\n\t\tctx.fillStyle = this.color;\n\t\tctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n\t\tctx.fill();\n\t}\n\n\tupdate() {\n\t\tif ((this.x + this.size) >= width) {\n\t\t\tthis.velX = -(this.velX);\n\t\t}\n\n\t\tif ((this.x - this.size) <= 0) {\n\t\t\tthis.velX = -(this.velX);\n\t\t}\n\n\t\tif ((this.y + this.size) >= height) {\n\t\t\tthis.velY = -(this.velY);\n\t\t}\n\n\t\tif ((this.y - this.size) <= 0) {\n\t\t\tthis.velY = -(this.velY);\n\t\t}\n\n\t\tthis.x += this.velX;\n\t\tthis.y += this.velY;\n\t}\n\n\tcollisionDetect() {\n\t\tfor (const ball of balls) {\n\t\t\tif (!(this === ball) && ball.exists) {\n\t\t\t\tconst dx = this.x - ball.x;\n\t\t\t\tconst dy = this.y - ball.y;\n\t\t\t\tconst distance = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\t\tif (distance < this.size + ball.size) {\n\t\t\t\t\tball.color = this.color = randomRGB();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass EvilCircle extends Shape {\n\tconstructor(x, y) {\n\t\tsuper(x, y, 10, 10);\n\t\tthis.color = 'white';\n\t\tthis.size = 10;\n\t\twindow.addEventListener('keydown', (e) => {\n\t\t\t\tswitch(e.key) {\n\t\t\t\t\tcase 'a':\n\t\t\t\t\tthis.x -= this.velX;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'd':\n\t\t\t\t\tthis.x += this.velX;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'w':\n\t\t\t\t\tthis.y -= this.velY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's':\n\t\t\t\t\tthis.y += this.velY;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tdraw() {\n\t\tctx.beginPath();\n\t\tctx.lineWidth = 3;\n\t\tctx.strokeStyle = this.color;\n\t\tctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n\t\tctx.stroke();\n\t}\n\n\tcheckBounds() {\n\t\tif ((this.x + this.size) >= width) {\n\t\t\tthis.x = width - this.size - 20\n\t\t}\n\n\t\tif ((this.x - this.size) <= 0) {\n\t\t\tthis.x = this.size + 20\n\t\t}\n\n\t\tif ((this.y + this.size) >= height) {\n\t\t\tthis.y = height - this.size - 20\n\t\t}\n\n\t\tif ((this.y - this.size) <= 0) {\n\t\t\tthis.y = this.size + 20\n\t\t}\n    }\n\n\tcollisionDetect() {\n\t\tfor (const ball of balls) {\n\t\t\tif (ball.exists) {\n\t\t\t\tconst dx = this.x - ball.x;\n\t\t\t\tconst dy = this.y - ball.y;\n\t\t\t\tconst distance = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\t\tif (distance < this.size + ball.size) {\n\t\t\t\t\tball.exists = false;\n\t\t\t\t\tcount--;\n\t\t\t\t\tballCount.innerHTML = `Ball count: ${count}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nconst balls = [];\n\nwhile (balls.length < 25) {\n\tconst size = random(10,20);\n\tconst ball = new Ball(\n\t\t// ball position always drawn at least one ball width\n\t\t// away from the edge of the canvas, to avoid drawing errors\n\t\trandom(0+size, width-size),\n\t\trandom(0+size, height-size),\n\t\trandom(-7,7),\n\t\trandom(-7,7),\n\t\trandomRGB(),\n\t\tsize\n\t);\n\tballs.push(ball);\n\tcount++;\n\tballCount.innerHTML = `Ball count: ${count}`;\n}\n\nevil = new EvilCircle(random(0+10, width-10), random(0+10, width-10));\n\nfunction loop() {\n\tctx.fillStyle = 'rgba(0, 0, 0, 0.25)';\n\tctx.fillRect(0, 0, width, height);\n\n\tfor (const ball of balls) {\n\t\tif(ball.exists) {\n\t\t\tball.draw();\n\t\t\tball.update();\n\t\t\tball.collisionDetect();\n\t\t}\n\t}\n\tevil.draw();\n\tevil.checkBounds();\n\tevil.collisionDetect();\n\n\trequestAnimationFrame(loop);\n}\n\nloop()\n"]}